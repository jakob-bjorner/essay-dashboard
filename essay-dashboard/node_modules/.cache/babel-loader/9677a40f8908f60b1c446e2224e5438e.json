{"ast":null,"code":"var _jsxFileName = \"/Users/rishinopany/Georgia Tech/projects/essay-dashboard/essay-dashboard/src/routes/rephrase.js\",\n    _s = $RefreshSig$();\n\nimport arrow from '../arrow.svg';\nimport copy_icon from '../copy-icon.png';\nimport like_btn from '../like-btn.png';\nimport dislike_btn from '../dislike-btn.png';\nimport React, { useState, setState, useRef, useEffect } from 'react';\nimport { useRive } from 'rive-react';\nimport Rive from 'rive-react';\nimport { rephraseSentence } from '../services/RephraseRequestService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction OutputBox(props) {\n  // if (props.loading) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"output-box\",\n    children: /*#__PURE__*/_jsxDEV(Rive, {\n      className: \"loading-animation\",\n      src: \"Loading-Animation.riv\",\n      animations: \"Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 3\n  }, this); // } else {\n  // \treturn (\n  // \t<div className=\"output-box\">\n  // \t\t\t<div className=\"result\">{props.output}</div>\n  // \t\t\t<div className=\"bottom-bar\">\n  // \t\t\t\t<button className=\"output-btn like-btn\"><img className=\"icon like-icon\" src={like_btn}/></button>\n  // \t\t\t\t<button className=\"output-btn dislike-btn\"><img className=\"icon dislike-icon\" src={dislike_btn}/></button>\n  // \t\t\t\t<button className=\"output-btn copy-btn\"><img className=\"icon copy-icon\" src={copy_icon} onClick={() => {navigator.clipboard.writeText(props.output)}}/></button>\n  // \t\t\t</div>\n  // \t\t</div>\n  // )\n  // }\n}\n\n_c = OutputBox;\nexport default function Rephrase() {\n  _s();\n\n  const [output, showResult] = useState('');\n  const [input, setInput] = useState('');\n  const inputRef = useRef(null);\n  const [loading, setLoading] = useState(false);\n  /*As long as there are changes being made on \"Type something.. \" text area,\n  setInput set what ever changes as the value  */\n\n  function handleChange(event) {\n    /*Listens to those changes and set changes as the value*/\n    setInput(event.target.value);\n    /* If the user removes their input, remove the previous output as well */\n\n    if (event.target.value == \"\") {\n      showResult(\"\");\n    }\n  }\n  /*This function runs the moment you click on the arrow */\n\n\n  async function handleSubmit(event) {\n    /*Tells the app that the response is loading... */\n    setLoading(true);\n    /*Awaits response from the backend. Response is in an object form */\n\n    const data = await rephraseSentence(input);\n    /*Tells the app that the response has been obtained */\n\n    setLoading(false);\n    /*Show results extract the rephrased element of the object and displays it in the \n    \"Response ..\" text area */\n\n    showResult(data.rephrased);\n    /*Prevents textarea from reverting to their default value which is \"\" */\n\n    event.preventDefault();\n  }\n\n  useEffect(() => {\n    console.log(input);\n  }, [input]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"IObox\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        ref: inputRef,\n        type: \"text\",\n        className: \"input\",\n        placeholder: \"Type something...\",\n        onChange: handleChange,\n        value: input,\n        align: \"left\"\n      }, \"user_name_key\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: arrow,\n        className: \"arrow\",\n        alt: \"arrow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(OutputBox, {\n      output: output,\n      loading: loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Rephrase, \"cN2QHvbSx12CAXE0M8R8/YpL0ho=\");\n\n_c2 = Rephrase;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"OutputBox\");\n$RefreshReg$(_c2, \"Rephrase\");","map":{"version":3,"sources":["/Users/rishinopany/Georgia Tech/projects/essay-dashboard/essay-dashboard/src/routes/rephrase.js"],"names":["arrow","copy_icon","like_btn","dislike_btn","React","useState","setState","useRef","useEffect","useRive","Rive","rephraseSentence","OutputBox","props","Rephrase","output","showResult","input","setInput","inputRef","loading","setLoading","handleChange","event","target","value","handleSubmit","data","rephrased","preventDefault","console","log"],"mappings":"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","sourcesContent":["import arrow from '../arrow.svg';\nimport copy_icon from '../copy-icon.png';\nimport like_btn from '../like-btn.png';\nimport dislike_btn from '../dislike-btn.png';\nimport React, { useState, setState, useRef, useEffect } from 'react';\nimport { useRive } from 'rive-react';\nimport Rive from 'rive-react';\n\nimport { rephraseSentence } from '../services/RephraseRequestService';\n\nfunction OutputBox(props) {\n\t// if (props.loading) {\n\t\treturn (\n\t\t<div className=\"output-box\">\n\t\t\t\t<Rive className=\"loading-animation\" src=\"Loading-Animation.riv\" animations=\"Loading\" />\n\t\t\t</div>\n\t)\n\t// } else {\n\t// \treturn (\n\t// \t<div className=\"output-box\">\n\t// \t\t\t<div className=\"result\">{props.output}</div>\n\t// \t\t\t<div className=\"bottom-bar\">\n\t// \t\t\t\t<button className=\"output-btn like-btn\"><img className=\"icon like-icon\" src={like_btn}/></button>\n\t// \t\t\t\t<button className=\"output-btn dislike-btn\"><img className=\"icon dislike-icon\" src={dislike_btn}/></button>\n\t// \t\t\t\t<button className=\"output-btn copy-btn\"><img className=\"icon copy-icon\" src={copy_icon} onClick={() => {navigator.clipboard.writeText(props.output)}}/></button>\n\t// \t\t\t</div>\n\t// \t\t</div>\n\t// )\n\t// }\n}\nexport default function Rephrase() {\n\tconst [output, showResult] = useState('');\n\tconst [input, setInput] = useState('');\n\tconst inputRef = useRef(null);\n\tconst [loading, setLoading] = useState(false);\n\n\t/*As long as there are changes being made on \"Type something.. \" text area,\n\tsetInput set what ever changes as the value  */\n\tfunction handleChange(event) {\n\t\t/*Listens to those changes and set changes as the value*/\n\t\tsetInput(event.target.value);\n\t\t/* If the user removes their input, remove the previous output as well */\n\t\tif (event.target.value == \"\") {\n\t\t\tshowResult(\"\");\n\t\t}\n\t}\n\t/*This function runs the moment you click on the arrow */\n\tasync function handleSubmit(event) {\n\t\t/*Tells the app that the response is loading... */\n\t\tsetLoading(true);\n\t\t/*Awaits response from the backend. Response is in an object form */\n\t\tconst data = await rephraseSentence(input);\n\t\t/*Tells the app that the response has been obtained */\n\t\tsetLoading(false);\n\t\t/*Show results extract the rephrased element of the object and displays it in the \n\t\t\"Response ..\" text area */\n\t\tshowResult(data.rephrased);\n\n\t\t/*Prevents textarea from reverting to their default value which is \"\" */\n\t\tevent.preventDefault();\n\t}\n\n\tuseEffect(() => {\n\t\tconsole.log(input);\n\t}, [input]);\n\n\treturn (\n\n\t\t<div className=\"IObox\">\n\t\t\t<form>\n\t\t\t\t<textarea\n\t\t\t\t\tref={inputRef}\n\t\t\t\t\tkey=\"user_name_key\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tclassName=\"input\"\n\t\t\t\t\tplaceholder=\"Type something...\"\n\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\tvalue={input}\n\t\t\t\t\talign=\"left\"\n\t\t\t\t></textarea>\n\t\t\t</form>\n\t\t\t<button onClick={handleSubmit}>\n\t\t\t\t<img src={arrow} className=\"arrow\" alt=\"arrow\"></img>\n\t\t\t</button>\n\t\t\t<OutputBox output={output} loading={loading} />\n\t\t</div>\n\n\t);\n}"]},"metadata":{},"sourceType":"module"}